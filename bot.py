import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from keep_alive import keep_alive
import os

# ЁЯФР Configurations
ADMIN_ID = 6243881362  # тмЕя╕П ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ numeric Telegram ID ржжрж┐ржи
BOT_TOKEN = "7954426456:AAHJmRXrU_SQ-VyUIceOW-fCGIxIqJ5y7Lo"
ACCESS_KEY = "XT54JUI"

# ЁЯФв Steps
(ASK_KEY, APP_NAME, EMAIL, PHONE, BKASH, NAGAD, ROCKET, LOGO) = range(8)

# ЁЯМР Keep alive
keep_alive()

# ЁЯУж User Data Store
user_inputs = {}

# ЁЯУЛ Logging
logging.basicConfig(level=logging.INFO)

# тЦ╢я╕П Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо {update.effective_user.first_name}!\n\n"
        f"ржЕрзНржпрж╛ржк ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ Access Key ржжрж┐ржи:"
    )
    return ASK_KEY

# ЁЯФР Access Key
async def ask_app_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip()
    if key == ACCESS_KEY:
        user_inputs[update.effective_user.id] = {}
        await update.message.reply_text("тЬЕ рж╕ржарж┐ржХ Key!\n\nЁЯУ▒ ржПржЦржи ржЖржкржирж╛рж░ App Name ржжрж┐ржи:")
        return APP_NAME
    else:
        await update.message.reply_text(
            "тЭМ ржнрзБрж▓ Key!\n\n"
            "ЁЯФР ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржарж┐ржХ Key ржжрж┐ржи ржЕржержмрж╛ SWYGEN BD ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи!\n"
            "ЁЯУй https://t.me/Swygen_bd"
        )
        return ASK_KEY

# ЁЯУЭ App Name
async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["app_name"] = update.message.text.strip()
    await update.message.reply_text("ЁЯУз ржПржЦржи ржЖржкржирж╛рж░ ржпрзЛржЧрж╛ржпрзЛржЧрзЗрж░ Email ржжрж┐ржи:")
    return EMAIL

# ЁЯУЭ Email
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["email"] = update.message.text.strip()
    await update.message.reply_text("ЁЯУЮ ржлрзЛржи ржиржорзНржмрж░ ржжрж┐ржи:")
    return PHONE

# ЁЯУЭ Phone
async def ask_bkash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["phone"] = update.message.text.strip()
    await update.message.reply_text("ЁЯУ▓ ржмрж┐ржХрж╛рж╢ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:")
    return BKASH

# ЁЯУЭ Bkash
async def ask_nagad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["bkash"] = update.message.text.strip()
    await update.message.reply_text("ЁЯТ│ ржиржЧржж ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:")
    return NAGAD

# ЁЯУЭ Nagad
async def ask_rocket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["nagad"] = update.message.text.strip()
    await update.message.reply_text("ЁЯПж рж░ржХрзЗржЯ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:")
    return ROCKET

# ЁЯЦ╝я╕П Request Logo
async def ask_logo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_inputs[update.effective_user.id]["rocket"] = update.message.text.strip()
    await update.message.reply_text("ЁЯЦ╝я╕П ржПржЦржи ржЖржкржирж╛рж░ App ржПрж░ рж▓рзЛржЧрзЛ ржЖржкрж▓рзЛржб ржХрж░рзБржи (ржПржХржЯрж┐ ржЫржмрж┐ ржжрж┐ржи):")
    return LOGO

# тЬЕ Final Logo Receive
async def receive_logo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if update.message.photo:
        photo_file = await context.bot.get_file(update.message.photo[-1].file_id)
        file_path = f"{user_id}_logo.jpg"
        await photo_file.download_to_drive(file_path)

        data = user_inputs.get(user_id, {})
        summary = f"""
ЁЯУе ржирждрзБржи ржЕрзНржпрж╛ржк ржЕрж░рзНржбрж╛рж░:

ЁЯСд ржЗржЙржЬрж╛рж░: {update.effective_user.first_name}
ЁЯЖФ ржЗржЙржЬрж╛рж░ржирзЗржо: @{update.effective_user.username or 'N/A'}
ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {update.effective_user.id}

ЁЯУ▒ App Name: {data.get("app_name")}
ЁЯУз Email: {data.get("email")}
ЁЯУЮ Phone: {data.get("phone")}
ЁЯУ▓ ржмрж┐ржХрж╛рж╢: {data.get("bkash")}
ЁЯТ│ ржиржЧржж: {data.get("nagad")}
ЁЯПж рж░ржХрзЗржЯ: {data.get("rocket")}
"""

        # тЮд Send text + logo to admin
        await context.bot.send_message(chat_id=ADMIN_ID, text=summary)
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=InputFile(file_path))

        # тЮд Confirm to user
        await update.message.reply_text(
            "тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
            "ЁЯЫая╕П ржЕрзНржпрж╛ржк рждрзИрж░рж┐рж░ ржХрж╛ржЬ ржЪрж▓ржЫрзЗред рзкрзо ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ SWYGEN ржЯрж┐ржо ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ржмрзЗред\n\nржзржирзНржпржмрж╛ржж!"
        )

        os.remove(file_path)
        user_inputs.pop(user_id, None)
        return ConversationHandler.END
    else:
        await update.message.reply_text("тЪая╕П ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржЫржмрж┐ ржжрж┐ржи:")
        return LOGO

# тЭМ Cancel Option
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("тЭМ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    return ConversationHandler.END

# тЦ╢я╕П Run Bot
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_app_name)],
            APP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_bkash)],
            BKASH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_nagad)],
            NAGAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_rocket)],
            ROCKET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_logo)],
            LOGO: [MessageHandler(filters.PHOTO, receive_logo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("ЁЯдЦ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
