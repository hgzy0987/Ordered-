import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from keep_alive import keep_alive
import os

# ЁЯФР Configurations
ADMIN_ID = 6243881362  # ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ID ржмрж╕рж╛ржи
ACCESS_KEY = "XT54JUI"
BOT_TOKEN = "7954426456:AAHJmRXrU_SQ-VyUIceOW-fCGIxIqJ5y7Lo"

# ЁЯФв States
ASK_KEY, ASK_DETAILS, ASK_LOGO = range(3)

# ЁЯМР Keep alive
keep_alive()

# ЁЯз╛ Logger
logging.basicConfig(level=logging.INFO)

# ЁЯУж Temp storage
user_inputs = {}

# тЦ╢я╕П Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"""ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо {update.effective_user.first_name}!

ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржЕрзНржпрж╛ржк ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред

ЁЯФР ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ Access Key ржжрж┐ржи:"""
    )
    return ASK_KEY

# ЁЯФР Access Key checker
async def get_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip() == ACCESS_KEY:
        await update.message.reply_text(
            "тЬЕ рж╕ржарж┐ржХ Key!\n\n"
            "ЁЯФ╜ ржПржЦржи ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ рждржерзНржп ржжрж┐ржи:\n\n"
            "1я╕ПтГг App Name\n"
            "2я╕ПтГг Email\n"
            "3я╕ПтГг Phone\n"
            "4я╕ПтГг ржмрж┐ржХрж╛рж╢ ржиржорзНржмрж░\n"
            "5я╕ПтГг ржиржЧржж ржиржорзНржмрж░\n"
            "6я╕ПтГг рж░ржХрзЗржЯ ржиржорзНржмрж░"
        )
        return ASK_DETAILS
    else:
        await update.message.reply_text("тЭМ ржнрзБрж▓ Key! ржЖржмрж╛рж░ ржжрж┐ржи:")
        return ASK_KEY

# ЁЯУе Collect Text Info
async def get_app_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = update.message.text.strip().split("\n")
    if len(lines) < 6:
        await update.message.reply_text("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ App рж╕ржВржХрзНрж░рж╛ржирзНржд рзмржЯрж┐ рждржерзНржп ржжрж┐ржиред ржЖржмрж╛рж░ ржжрж┐ржи:")
        return ASK_DETAILS

    user_inputs[update.effective_user.id] = {
        "name": lines[0],
        "email": lines[1],
        "phone": lines[2],
        "bkash": lines[3],
        "nagad": lines[4],
        "rocket": lines[5]
    }

    await update.message.reply_text("ЁЯЦ╝я╕П ржПржЦржи ржЖржкржирж╛рж░ рж▓рзЛржЧрзЛ ржЫржмрж┐ ржжрж┐ржи (ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи)")
    return ASK_LOGO

# ЁЯУ╖ Receive Logo
async def get_logo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message.photo:
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        file_path = f"{user_id}_logo.jpg"
        await file.download_to_drive(file_path)

        # тмЗя╕П Text info
        data = user_inputs.get(user_id, {})
        text = f"""ЁЯУе ржирждрзБржи ржЕрзНржпрж╛ржк ржЕрж░рзНржбрж╛рж░:

ЁЯСд ржЗржЙржЬрж╛рж░: {update.effective_user.first_name}
ЁЯЖФ ржЗржЙржЬрж╛рж░ржирзЗржо: @{update.effective_user.username or 'N/A'}
ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {update.effective_user.id}

ЁЯФ╣ App Name: {data.get("name")}
ЁЯУз Email: {data.get("email")}
ЁЯУЮ Phone: {data.get("phone")}
ЁЯУ▓ ржмрж┐ржХрж╛рж╢: {data.get("bkash")}
ЁЯТ│ ржиржЧржж: {data.get("nagad")}
ЁЯПж рж░ржХрзЗржЯ: {data.get("rocket")}
"""

        # ЁЯУд Send to Admin
        await context.bot.send_message(chat_id=ADMIN_ID, text=text)
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=InputFile(file_path))

        # тЬЕ User confirmation
        await update.message.reply_text(
            "тЬЕ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржк ржЕрж░рзНржбрж╛рж░ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
            "ЁЯЫая╕П рзкрзо ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЖржорж╛ржжрзЗрж░ ржЯрж┐ржо ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░ржмрзЗред"
        )

        # тЬЕ Clean up
        os.remove(file_path)
        user_inputs.pop(user_id, None)
        return ConversationHandler.END
    else:
        await update.message.reply_text("тЪая╕П ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз ржЫржмрж┐ ржжрж┐ржиред")
        return ASK_LOGO

# тЭМ Cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("тЭМ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    return ConversationHandler.END

# тЦ╢я╕П Run Bot
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_key)],
            ASK_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_app_info)],
            ASK_LOGO: [MessageHandler(filters.PHOTO, get_logo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    print("ЁЯдЦ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
